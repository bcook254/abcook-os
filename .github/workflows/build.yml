name: Build Images
on:
  schedule:
    - cron: '29 17 * * 0,2,5' # UTC 17:29 Sunday,Tuesday,Friday
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  merge_group:
  workflow_dispatch:
env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_ublue:
    name: Build and push image (${{ matrix.image_name}},${{ matrix.major_version }},${{ contains(matrix.os,'arm') && 'aarch64' || 'x86_64' }},${{ matrix.image_variant}})
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-24.04, ubuntu-24.04-arm ]
        major_version: [41, 42]
        image_name: [silverblue]
        image_variant: [main, surface]
        exclude:
            # no aarch64 variants for surface devices
          - os: ubuntu-24.04-arm
            image_variant: surface
          - image_variant: surface
            major_version: 42
    env:
      IMAGE_NAME: ${{ matrix.image_name }}-${{ matrix.image_variant }}
    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4.2.2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo buildah podman

      - name: Get kernel version
        id: version
        shell: bash
        run: |
          if [[ ${{ matrix.image_variant }} =~ surface ]]; then
            container_name="fq-$(uuidgen)"
            dnf="podman exec $container_name dnf"
            curl="podman exec $container_name curl"

            podman run --entrypoint /bin/bash --name "$container_name" -dt "quay.io/fedora/fedora:${{ matrix.major_version }}"
            $dnf install -y dnf-plugins-core
          fi

          case ${{ matrix.image_variant }} in
            "surface")
              $curl -Lo /etc/yum.repos.d/linux-surface.repo https://pkg.surfacelinux.com/fedora/linux-surface.repo
              linux=$($dnf repoquery --repoid linux-surface --whatprovides kernel-surface | sort -V | tail -n1 | sed 's/.*://')
              ;;
            "main")
              linux=$(skopeo inspect docker://quay.io/fedora/fedora${{ contains(matrix.image_name,'base') && '' || '-'}}${{ matrix.image_name }}:${{ matrix.major_version }} | jq -r '.Labels["ostree.linux"]' )
              ;;
          esac

          if [ -z "$linux" ] || [ "null" = "$linux" ]; then
            echo "inspected image linux version must not be empty or null"
            exit 1
          fi

          echo "Kernel Version is ${linux}"
          echo "KERNEL_VERSION=${linux}" >> $GITHUB_OUTPUT

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          ARCH="$(uname -m)"

          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"

          MAJOR_VERSION="${{ matrix.major_version }}"
          VARIANT="${{ matrix.image_variant }}"

          # Have tags for tracking builds during pull request
          COMMIT_TAGS=()
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${MAJOR_VERSION}-${ARCH}")
          COMMIT_TAGS+=("${SHA_SHORT}-${MAJOR_VERSION}-${ARCH}")

          BUILD_TAGS=("${MAJOR_VERSION}-${ARCH}" "${MAJOR_VERSION}-${ARCH}-${TIMESTAMP}")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      - name: Get current Fedora version
        id: labels
        shell: bash
        run: |
            set -eo pipefail
            ver=$(skopeo inspect docker://quay.io/fedora/fedora${{ contains(matrix.image_name,'base') && '' || '-'}}${{ matrix.image_name }}:${{ matrix.major_version }} | jq -r '.Labels["org.opencontainers.image.version"]')
            if [ -z "$ver" ] || [ "null" = "$ver" ]; then
              echo "inspected image version must not be empty or null"
              exit 1
            fi
            echo "Fedora Version is ${ver}"
            echo "VERSION=$ver" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.version=${{ steps.labels.outputs.VERSION }}
            org.opencontainers.image.description=abcook-os ${{ matrix.image_name }}${{ contains(matrix.image_variant,'surface') && ' for Surface devices' || ''}}${{ contains(matrix.image_variant,'nvidia') && ' with Nvidia drivers' || ''}}.
            ostree.linux=${{ steps.version.outputs.KERNEL_VERSION }}
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/44739883?s=200&v=4

      # Build the image using Buildah action
      - name: Build image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            SOURCE_VARIANT=-${{ matrix.image_name }}
            IMAGE_NAME=${{ matrix.image_name }}
            IMAGE_VARIANT=${{ matrix.image_variant }}
            KERNEL_VERSION=${{ steps.version.outputs.KERNEL_VERSION }}
            FEDORA_MAJOR_VERSION=${{ matrix.major_version }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sign container
      - uses: sigstore/cosign-installer@v3.8.2
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"

  build_manifests:
    name: Build and push manifests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    if: ${{ github.event_name != 'pull_request' }}
    needs: [build_ublue]
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build manifests
        id: build_manifests
        shell: bash
        run: |
          python3 <<EOF

          import itertools as it
          import subprocess
          import yaml

          # image matrix
          images_def = """
          image_name:
            - silverblue
          image_variant:
            - main
            - surface
          major_version:
            - 41
            - 42
          image_arch:
            - x86_64
            - aarch64
          """
          images_dict = yaml.safe_load(images_def)

          # image exclusion matrix
          image_exclusions_def = """
          - image_arch: aarch64
            image_variant: surface
          - image_variant: surface
            major_version: 42
          """
          image_exclusions_dict = yaml.safe_load(image_exclusions_def)

          # got all image keys and sort
          allNames = sorted(images_dict)
          # create all possible combinations
          combinations = it.product(*(images_dict[Name] for Name in allNames))
          all_images = [dict(zip(allNames, d)) for d in list(combinations)]

          # remove all images that match any exclusion pattern
          final_images = []
          for image in all_images:
            if not any(all(key in image and image[key] == value for key, value in exclusion.items()) for exclusion in image_exclusions_dict):
              final_images.append(image)

          # manifest inclusion matrix
          manifests_def = """
          image_name:
            - silverblue
          image_variant:
            - main
            - surface
          major_version:
            - 41
            - 42
          """
          manifests_dict = yaml.safe_load(manifests_def)

          # got all manifest keys and sort
          allNames = sorted(manifests_dict)
          # create all possible combinations
          combinations = it.product(*(manifests_dict[Name] for Name in allNames))
          all_manifests = [dict(zip(allNames, d)) for d in list(combinations)]

          # for each manifest, find all images that match
          final_manifests = {}
          for manifest in all_manifests:
            manifest_images = []
            for image in final_images:
              if all(key in image and image[key] == value for key, value in manifest.items()):
                manifest_images.append(image)

            manifest_final = f'{manifest["image_name"]}-{manifest["image_variant"]}:{manifest["major_version"]}'
            manifest_images_final = list(map(lambda i: f'{i["image_name"]}-{i["image_variant"]}:{i["major_version"]}-{i["image_arch"]}', manifest_images))
            final_manifests[manifest_final] = manifest_images_final

            # add case for 'latest' tag
            if str(manifest["major_version"]) == "42":
              manifest_final = f'{manifest["image_name"]}-{manifest["image_variant"]}:latest'
              final_manifests[manifest_final] = manifest_images_final

          for manifest in final_manifests:
            if len(final_manifests[manifest]) > 0:
              # create the manifest and push
              manifest_result = subprocess.run(['buildah', 'manifest', 'create', f'localhost/{manifest}'], stdout=subprocess.PIPE).stdout.decode('utf-8').rstrip()
              for image in final_manifests[manifest]:
                image_result = subprocess.run(['buildah', 'manifest', 'add', f'localhost/{manifest}', f'ghcr.io/bcook254/{image}'], stdout=subprocess.PIPE).stdout.decode('utf-8').rstrip()

              print(f'Push docker://ghcr.io/bcook254/{manifest}')
              push_result = subprocess.run(['buildah', 'manifest', 'push', '--rm', f'localhost/{manifest}', f'docker://ghcr.io/bcook254/{manifest}'], stdout=subprocess.PIPE).stdout.decode('utf-8').rstrip()
          EOF

  checks:
    name: Check all builds successful
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [build_ublue, build_manifests]
    steps:
      - name: Exit on failure
        if: ${{ needs.build_ublue.result == 'failure' || needs.build_manifests.result == 'failure' }}
        shell: bash
        run: exit 1
      - name: Exit
        shell: bash
        run: exit 0
